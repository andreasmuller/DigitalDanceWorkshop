#define HALF_PI  1.57079632679489661923
#define PI       3.14159265358979323846
#define TWO_PI   6.28318530717958647693

float map( float value, float inputMin, float inputMax, float outputMin, float outputMax ) { return ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin); }
float mapClamped( float value, float inputMin, float inputMax, float outputMin, float outputMax ) { return clamp( ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin),    outputMin, outputMax ); }

vec3  map( vec3 value, vec3 inputMin, vec3 inputMax, vec3 outputMin, vec3 outputMax ) { return ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin); }

float rand(vec2 co) { return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }
float stepInOut( float _edge1, float _edge2, float _val ) { return step(_edge1, _val) - step(_edge2,_val); }
float smoothStepInOut( float _low0, float _high0, float _high1, float _low1, float _t ) { return smoothstep( _low0, _high0, _t ) * (1.0 - smoothstep( _high1, _low1, _t )); }

float mod289(float x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec2 mod289(vec2 x)   { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec3 mod289(vec3 x)   { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec4 mod289(vec4 x)   { return x - floor(x * (1.0 / 289.0)) * 289.0; }

float permute(float x) { return mod289(((x*34.0)+1.0)*x); }
vec3 permute(vec3 x)   { return mod289(((x*34.0)+1.0)*x); }
vec4 permute(vec4 x)   { return mod289(((x*34.0)+1.0)*x); }

float taylorInvSqrt(float r) { return 1.79284291400159 - 0.85373472095314 * r; }
vec4 taylorInvSqrt(vec4 r)   { return 1.79284291400159 - 0.85373472095314 * r; }

// --------------------------------------
vec3 randomPointOnSphere( vec3 _random )
{
	float lambda = _random.x;
	float u = map( _random.y, 0.0, 1.0, -1.0, 1.0 );
	float phi = _random.z * (2.0 * PI );
	
	vec3 p;
	p.x = pow(lambda, 1.0/3.0) * sqrt(1.0 - u * u) * cos(phi);
	p.y = pow(lambda, 1.0/3.0) * sqrt(1.0 - u * u) * sin(phi);
	p.z = pow(lambda, 1.0/3.0) * u;
	
	return p;
}


// http://www.iquilezles.org/www/articles/functions/functions.htm

// --------------------------------------
float cubicPulse( float c, float w, float x )
{
	x = abs(x - c);
	if( x>w ) return 0.0;
	x /= w;
	return 1.0 - x*x*(3.0-2.0*x);
}

// --------------------------------------
float expStep( float x, float k, float n )
{
	return exp( -k*pow(x,n) );
}

// --------------------------------------
float parabola( float x, float k )
{
	return pow( 4.0*x*(1.0-x), k );
}

// --------------------------------------
float pcurve( float x, float a, float b )
{
	float k = pow(a+b,a+b) / (pow(a,a)*pow(b,b));
	return k * pow( x, a ) * pow( 1.0-x, b );
}

// --------------------------------------
float impulse( float k, float x )
{
	float h = k*x;
	return h*exp(1.0-h);
}

// -----------------------------
vec3 opTwistX( vec3 _p, float _angPerUnit )
{
	float c = cos( _angPerUnit * _p.x);
	float s = sin( _angPerUnit * _p.x);
	mat2  m = mat2(c,-s,s,c);
	return vec3( _p.x, m * _p.yz );
}
