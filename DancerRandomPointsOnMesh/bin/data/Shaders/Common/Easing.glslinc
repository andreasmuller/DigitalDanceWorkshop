
// GLSL easing functions, copied from https://www.npmjs.com/package/glsl-easings

#ifndef PI
	#define PI 3.141592653589793
#endif

#ifndef HALF_PI
	#define HALF_PI 1.5707963267948966
#endif


// -----------------------------
// Coefficients for Matrix M
//

#define CM_SPLINE_M11  0.0
#define CM_SPLINE_M12  1.0
#define CM_SPLINE_M13  0.0
#define CM_SPLINE_M14  0.0
#define CM_SPLINE_M21 -0.5
#define CM_SPLINE_M22  0.0
#define CM_SPLINE_M23  0.5
#define CM_SPLINE_M24  0.0
#define CM_SPLINE_M31  1.0
#define CM_SPLINE_M32 -2.5
#define CM_SPLINE_M33  2.0
#define CM_SPLINE_M34 -0.5
#define CM_SPLINE_M41 -0.5
#define CM_SPLINE_M42  1.5
#define CM_SPLINE_M43 -1.5
#define CM_SPLINE_M44  0.5

// -----------------------------
float catmullRomSpline( float v0,float v1,
                        float v2,float v3, float x )
{
  
  float c1,c2,c3,c4;
  
  c1 =           CM_SPLINE_M12*v1;
  c2 = CM_SPLINE_M21*v0          + CM_SPLINE_M23*v2;
  c3 = CM_SPLINE_M31*v0 + CM_SPLINE_M32*v1 + CM_SPLINE_M33*v2 + CM_SPLINE_M34*v3;
  c4 = CM_SPLINE_M41*v0 + CM_SPLINE_M42*v1 + CM_SPLINE_M43*v2 + CM_SPLINE_M44*v3;
  
  return(((c4*x + c3)*x +c2)*x + c1);
}

// -------------------------------------------------
// Bezier interpolation
// -------------------------------------------------

float bezierSpline( float v0, float v1, float v2, float v3, float t )
{
    float OneMinusT = 1.0 - t;
    float b0 = OneMinusT*OneMinusT*OneMinusT;
    float b1 = 3.0*t*OneMinusT*OneMinusT;
    float b2 = 3.0*t*t*OneMinusT;
    float b3 = t*t*t;
    return b0*v0 + b1*v1 + b2*v2 + b3*v3;
}

vec2 bezierSplineVec2( vec2 v0, vec2 v1, vec2 v2, vec2 v3, float t )
{
    float OneMinusT = 1.0 - t;
    float b0 = OneMinusT*OneMinusT*OneMinusT;
    float b1 = 3.0*t*OneMinusT*OneMinusT;
    float b2 = 3.0*t*t*OneMinusT;
    float b3 = t*t*t;
    return b0*v0 + b1*v1 + b2*v2 + b3*v3;
}

// From in nvidia sdk
vec3 bezierSplineVec3( vec3 v0, vec3 v1, vec3 v2, vec3 v3, float t )
{
    float OneMinusT = 1.0 - t;
    float b0 = OneMinusT*OneMinusT*OneMinusT;
    float b1 = 3.0*t*OneMinusT*OneMinusT;
    float b2 = 3.0*t*t*OneMinusT;
    float b3 = t*t*t;
    return b0*v0 + b1*v1 + b2*v2 + b3*v3;
}

// -------------------------------------------------
// Back
// -------------------------------------------------

// -------------------------------------------------
float backOut(float t) {
  float f = t < 0.5
    ? 2.0 * t
    : 1.0 - (2.0 * t - 1.0);

  float g = pow(f, 3.0) - f * sin(f * PI);

  return t < 0.5
    ? 0.5 * g
    : 0.5 * (1.0 - g) + 0.5;
}

// -------------------------------------------------
float backIn(float t) {
  return pow(t, 3.0) - t * sin(t * PI);
}

// -------------------------------------------------
float backInOut(float t) {
  float f = t < 0.5
    ? 2.0 * t
    : 1.0 - (2.0 * t - 1.0);

  float g = pow(f, 3.0) - f * sin(f * PI);

  return t < 0.5
    ? 0.5 * g
    : 0.5 * (1.0 - g) + 0.5;
}

// -------------------------------------------------
// Bounce
// -------------------------------------------------


// -------------------------------------------------
float bounceOut(float t) {
  const float a = 4.0 / 11.0;
  const float b = 8.0 / 11.0;
  const float c = 9.0 / 10.0;

  const float ca = 4356.0 / 361.0;
  const float cb = 35442.0 / 1805.0;
  const float cc = 16061.0 / 1805.0;

  float t2 = t * t;

  return t < a
    ? 7.5625 * t2
    : t < b
      ? 9.075 * t2 - 9.9 * t + 3.4
      : t < c
        ? ca * t2 - cb * t + cc
        : 10.8 * t * t - 20.52 * t + 10.72;
}

// -------------------------------------------------
float bounceIn(float t) {
return 1.0 - bounceOut(1.0 - t);
}

// -------------------------------------------------
float bounceInOut(float t) {
  return t < 0.5
    ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))
    : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;
}


// -------------------------------------------------
// Circular
// -------------------------------------------------

float circularIn(float t) {
  return 1.0 - sqrt(1.0 - t * t);
}
float circularOut(float t) {
  return sqrt((2.0 - t) * t);
}

float circularInOut(float t) {
  return t < 0.5
    ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))
    : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);
}

// -------------------------------------------------
// Cubic
// -------------------------------------------------

float cubicIn(float t) {
  return t * t * t;
}

float cubicOut(float t) {
  float f = t - 1.0;
  return f * f * f + 1.0;
}


float cubicInOut(float t) {
  return t < 0.5
    ? 4.0 * t * t * t
    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;
}

// -------------------------------------------------
// Elastic
// -------------------------------------------------

float elasticIn(float t) {
  return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));
}

float elasticOut(float t) {
  return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;
}

float elasticInOut(float t) {
  return t < 0.5
    ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))
    : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;
}

// -------------------------------------------------
// Exponential
// -------------------------------------------------

float exponentialIn(float t) {
  return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));
}

float exponentialOut(float t) {
  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);
}

float exponentialInOut(float t) {
  return t == 0.0 || t == 1.0
    ? t
    : t < 0.5
      ? +0.5 * pow(2.0, (20.0 * t) - 10.0)
      : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;
}

// -------------------------------------------------
// Linear
// -------------------------------------------------

float linear(float t) {
  return t;
}

// -------------------------------------------------
// Quadratic
// -------------------------------------------------

float quadraticIn(float t) {
  return t * t;
}

float quadraticOut(float t) {
  return -t * (t - 2.0);
}

float quadraticInOut(float t) {
  float p = 2.0 * t * t;
  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;
}

// -------------------------------------------------
// Quartic
// -------------------------------------------------

float quarticIn(float t) {
  return pow(t, 4.0);
}

float quarticOut(float t) {
  return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;
}

float quarticInOut(float t) {
  return t < 0.5
    ? +8.0 * pow(t, 4.0)
    : -8.0 * pow(t - 1.0, 4.0) + 1.0;
}

// -------------------------------------------------
// Quintic
// -------------------------------------------------

float qinticOut(float t) {
  return 1.0 - (pow(t - 1.0, 5.0));
}

float qinticIn(float t) {
  return pow(t, 5.0);
}


float qinticInOut(float t) {
  return t < 0.5
    ? +16.0 * pow(t, 5.0)
    : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;
}

// -------------------------------------------------
// Sine
// -------------------------------------------------

float sineOut(float t) {
  return sin(t * HALF_PI);
}

float sineIn(float t) {
  return sin((t - 1.0) * HALF_PI) + 1.0;
}

float sineInOut(float t) {
  return -0.5 * (cos(PI * t) - 1.0);
}